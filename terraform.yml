trigger:
- none

parameters:
  - name: workingDirectory
    type: string
    default: "$(Build.SourcesDirectory)/infra_basica"
  
  - name: Action
    displayName: Action
    type: string
    default: 'Apply'
    values:
    - Installer
    - Init
    - Plan
    - Apply
    - Destroy

pool:
  vmImage: ubuntu-latest

steps:
- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV2@2
  displayName: INIT
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    provider: 'aws'
    command: 'init'
    backendServiceAWS: 'AWS_INFRA_BASICA'
    backendAWSBucketName: 'tis-automation-bucket'
    backendAWSKey: 'terraform.tfstate'

- task: TerraformTaskV2@2
  displayName: VALIDATE
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    provider: 'aws'
    command: 'validate'

- task: TerraformTaskV2@2
  #condition: ne('${{ parameters.Action }}', 'Destroy')
  displayName: PLAN
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    provider: 'aws'
    command: 'plan'
    environmentServiceNameAWS: 'AWS_INFRA_BASICA'

- task: TerraformTaskV2@2
  condition: ne('${{ parameters.Action }}', 'Destroy')
  displayName: APPLY
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    provider: 'aws'
    command: 'apply'
    commandOptions: '-auto-approve'
    environmentServiceNameAWS: 'AWS_INFRA_BASICA'



- task: TerraformTaskV2@2
  condition: eq('${{ parameters.Action }}', 'Destroy')
  displayName: DESTROY
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    provider: 'aws'
    command: 'destroy'
    commandOptions: '-auto-approve'
    environmentServiceNameAWS: 'AWS_INFRA_BASICA'


- task: DownloadSecureFile@1
  condition: ne('${{ parameters.Action }}', 'Destroy')
  name: chave_privada
  inputs:
    secureFile: 'chave_privada_gitlab'

- task: Bash@3
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)'
    script: echo $(chave_privada.secureFilePath)

- task: CopyFiles@2
  condition: ne('${{ parameters.Action }}', 'Destroy')
  displayName: 'Copy file'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    OverWrite: true 
    Contents: |
      **/playbook_linux_servers.yml
      **/inventory.aws_ec2.yml
    TargetFolder: '/tmp/infra/'

- task: Docker@2
  condition: ne('${{ parameters.Action }}', 'Destroy')
  displayName: Executing Container
  inputs:
    command: 'run'
    arguments: '--rm -v /tmp/infra/:/tmp/infra --env AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) --env AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY) robsonngr/ansible:84  ansible-playbook -i /tmp/infra/infra_basica/inventory.aws_ec2.yml /tmp/infra/infra_basica/playbook_linux_servers.yml --extra-vars ansible_ssh_private_key_file="/tmp/infra/chave_privada_gitlab" --extra-vars ANSIBLE_HOST_KEY_CHECKING="False" -vvvv'

- task: DeleteFiles@1
  condition: ne('${{ parameters.Action }}', 'Destroy')
  displayName: Delete Files
  inputs:
    SourceFolder: '/tmp/infra/'
    Contents: '**/*'
    RemoveSourceFolder: true