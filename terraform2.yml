trigger:
- none

parameters:
  - name: workingDirectory
    type: string
    default: "$(Build.SourcesDirectory)/infra_basica"

  - name: Action
    displayName: Action
    type: string
    default: 'Apply'
    values:
    - Plan
    - Apply
    - Destroy

pool:
  vmImage: ubuntu-latest

stages:
- stage: terraform_install  # name of the stage, A-Z, a-z, 0-9, and underscore
  displayName: Terraform Install   # friendly name to display in the UI
  #dependsOn: string | [ string ]
  #condition: string
  #pool: string | pool
  #variables: { string: string } | [ variable | variableReference ] 
  jobs:
  - job: install
    steps:
    - script: |
        sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install terraform
        terraform --version



- stage: terraform_init  # name of the stage, A-Z, a-z, 0-9, and underscore
  displayName: Terraform Init   # friendly name to display in the UI
  dependsOn: terraform_install
  condition: and(succeeded('terraform_install'), ne('${{ parameters.Action }}', 'Destroy'))
  #pool: string | pool
  #variables: { string: string } | [ variable | variableReference ] 
  jobs:
  - job: Init
    steps:
    - task: CmdLine@2
      inputs:
        workingDirectory: '${{ parameters.workingDirectory }}'
        script: |
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
          terraform --version
          terraform init

- stage: terraform_plan  # name of the stage, A-Z, a-z, 0-9, and underscore
  displayName: Terraform Plan   # friendly name to display in the UI
  dependsOn: terraform_init
  condition: and(succeeded('terraform_init'), ne('${{ parameters.Action }}', 'Destroy'))
  #pool: string | pool
  #variables: { string: string } | [ variable | variableReference ] 
  jobs:
  - job: Plan
    steps:
    - task: CmdLine@2
      inputs:
        workingDirectory: '${{ parameters.workingDirectory }}'
        script: |
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
          terraform --version
          terraform init
          terraform plan

- stage: terraform_apply  # name of the stage, A-Z, a-z, 0-9, and underscore
  displayName: Terraform Apply   # friendly name to display in the UI
  dependsOn: terraform_plan
  condition: and(succeeded('terraform_plan'), ne('${{ parameters.Action }}', 'Destroy'), eq('${{ parameters.Action }}', 'Apply'))
  #pool: string | pool
  #variables: { string: string } | [ variable | variableReference ] 
  jobs:
  - job: Apply
    steps:
    - task: CmdLine@2
      inputs:
        workingDirectory: '${{ parameters.workingDirectory }}'
        script: |
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
          terraform --version
          terraform init
          terraform apply -auto-approve

- stage: Ansible
  displayName: Ansible
  condition: and(succeeded('terraform_apply'), ne('${{ parameters.Action }}', 'Destroy'), eq('${{ parameters.Action }}', 'Apply'))
  jobs:
  - job: Ansible
    steps:

    - task: DownloadSecureFile@1
      condition: ne('${{ parameters.Action }}', 'Destroy')
      name: chave_privada
      inputs:
       secureFile: 'chave_privada_gitlab'
    
    - task: Bash@3
      displayName: Install Dependencies and Run Playbook
      #condition: ne('${{ parameters.Action }}', 'Destroy')
      inputs:
        workingDirectory: '${{ parameters.workingDirectory }}'
        targetType: inline  
        script: | 
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) 
          export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
          export ANSIBLE_HOST_KEY_CHECKING="False"
          export SSH_KEY=$(cat /home/vsts/work/_temp/chave_privada_gitlab) > /dev/null
          eval $(ssh-agent -s)
          echo "$SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
          sudo mkdir -p ~/.ssh
          sudo chmod 700  ~/.ssh
          echo $(chave_privada.secureFilePath)
          sudo chmod 777 /home/vsts/work/_temp/chave_privada_gitlab
          #sudo cd /tmp/infra
          sudo apt-get update -y
          sudo apt-get install python3 -y
          python3 -m venv .venv && source .venv/bin/activate
          python3 -m pip install ansible boto3 pywinrm
          ansible --version
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.aws_ec2.yml playbook_linux_servers.yml -e ansible_ssh_private_key_file='{{ lookup("env", "SSH_KEY") }}' -v

- stage: terraform_destroy  # name of the stage, A-Z, a-z, 0-9, and underscore
  displayName: Terraform Destroy   # friendly name to display in the UI
  #dependsOn: terraform_plan
  condition: eq('${{ parameters.Action }}', 'Destroy')
  #pool: string | pool
  #variables: { string: string } | [ variable | variableReference ] 
  jobs:
  - job: Destroy
    steps:
    - task: CmdLine@2
      inputs:
        workingDirectory: '${{ parameters.workingDirectory }}'
        script: |
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
          terraform --version
          terraform init
          terraform destroy -auto-approve